function bootstrpPortOpt(returns,nSamples,names)
    % BOOTSTRPPORTOPT  bootstrapped portfolio optimisation
    % This approach is used by some customers and has been
    % advocated by Richard Michaud. 
    %
    % In the academic literature, however, this approach has been savaged
    % repeatedly for the fact that it fails to address a fundamental issue –
    % bootstrapping addresses sampling error but fails to address forecast,
    % i.e., out-of-sample, error.
    %
    % Nevertheless, here we illustrate the sampling distributions of portfolio
    % weights to highlight bootstrapping capabilities of MATLAB
    
    % For a back-testing approach exploring time-evolving 3D frontiers see Bob
    % Taylor's portfolio optimisation on MATLAB Central for one way to approach
    % the problem.
    % Normatively, you want to be in the lower portion of the efficient
    % frontier where it moves around more slowly over time
        
    % Set up parameters
    [nT,nAssets] = size(returns);
    
    % Resample with replacement from the original time series (x nSamples)
    bret = bootstrp(nSamples,@(x) x,returns);
    newseries = reshape(bret',nT,nAssets,nSamples);
    
    % Calculate the mean and covariance matrices for each of the bootstrapped
    % samples
    mus = squeeze(mean(newseries,1)); % nAssets x nSamples
    covs = arrayfun(@(idx) cov( squeeze(newseries(:,:,idx) ) ), ...
        1:nSamples,'UniformOutput',0);
    
    %% Resample the efficient frontier (EF)
    % Use default of 10 portfolios in each EF
    
    pwgts = NaN(nAssets,10,nSamples);
    prsks = NaN(10,nSamples);
    prtns = NaN(10,nSamples);
    
    P = Portfolio('AssetList',names,'NumAssets',nAssets);
    P = P.setDefaultConstraints;
    
    % There is built-in functionality to check whether the resulting portfolio
    % set is bounded
    isBounded = estimateBounds(P);
    
    for i=1:nSamples       
        % set up new asset moments generated by resampling
        AssetMean = mus(:,i);
        AssetCovar = covs{i};
        P = setAssetMoments(P, AssetMean, AssetCovar, nAssets);
        
        % Estimate the efficient frontier & associated portfolio weights
        pwgts(:,:,i) = estimateFrontier(P);
        [prsks(:,i), prtns(:,i)] = estimatePortMoments(P, squeeze(pwgts(:,:,i)));
    end
    
    %% Calculate the average weights across all 1000 resampled efficient frontiers?
    meanWts = mean(pwgts,3);
    
    %% Visualise all the resampled frontiers
    figure
    subplot(1,2,1)
    plot( prsks, prtns )
    axis tight
    title({'\bf Resampled'; 'Efficient Frontiers'})
    xlabel('Risk')
    ylabel('Return')
    
    %% Display the average weights across all 1000 resampled efficient frontiers
    subplot(1,2,2)
    createStackedBarGraph(meanWts,names)